#+author: Kevin Ward
#+email: k.warden.89@gmail.com

* Illiterate Config: A hot mess
I am not an organized person. The system I use to organize my life is based around loosely categorized piles.
However, I find literate programming fascinating and I decided try the literate config approach to Emacs.
Thank you to all the individuals who have crafted some amazing literate configs that I have the benefit of stealing bits and pieces from.
People like:
+ [[https://github.com/tecosaur/emacs-config/blob/master/config.org][@tecosaur]]
+ [[https://github.com/elken/.doom.d][@elken]]
+ [[https://github.com/zzamboni/dot-doom][@zzamboni]]
+ [[https://github.com/jeetelongname/dotfiles/blob/master/config/linked/doom/config.org][@jeetelongname]]
and many others I'm sure I've forgotten about.
Also, thank you Henrik Lissner for the time and effort you have spent developing the delightful Doom Emacs.
I use primary use Emacs as a note taking platform for work and D&D campaigns.
From time to time I'll do some actually coding in it but generally speaking I'm someone who aspires to be a programming /hobbyist/.

What you are about to witness is a perpetual work in progress. It won't be pretty, but it might be interesting.

** The Basics
*** Step One
+ Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]] for more info).
#+begin_src emacs-lisp :tangle yes
;;; config.el -*- lexical-binding: t; -*-
#+end_src

*** Personal Information
+ Who am I?
#+begin_src emacs-lisp :tangle yes
;; user info
(setq user-full-name "Kevin Ward"
      user-mail-address "k.warden.89@gmail.com")
#+end_src

+ This is used by GPG and all sorts of other things.

** Quality of Life Improvements
*** Better Defaults
+ Where is my org directory located? This is a little out of place but it needs to be set before org loads.
#+begin_src emacs-lisp :tangle yes
;; where the org at?
(setq org-directory "~/Dropbox/Org/")
#+end_src

+ I don't really need line numbers.
#+begin_src emacs-lisp :tangle yes
;; I don't care about line numbers
(setq display-line-numbers-type nil)
#+end_src

+ It's the little things that make a house a home. Or a text editor a home.
#+begin_src emacs-lisp :tangle yes
;; better defaults
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t                               ; Stretch cursor to the glyph width
 uniquify-buffer-name-style 'forward)
#+end_src

+ Just mash those buttons to escape.
#+begin_src emacs-lisp :tangle yes
;; mash jk without thinking
(setq evil-escape-unordered-key-sequence t)
#+end_src

+ You can't tell me where to go Emacs. I'll go past the end of the line if I want to. Also, when I leave insert mode don't move my cursor. Just leave it where it is.
#+begin_src emacs-lisp :tangle yes
(setq evil-move-beyond-eol t)           ; let me go where I want to go!
(setq evil-move-cursor-back nil)        ; don't move my cursor around!
#+end_src

+ If I didn't have undo I don't know what I'd do.
#+begin_src emacs-lisp :tangle yes
;; more better defaults
(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "…"               ; Unicode ellispis are nicer than "...", and also save /precious/ space
      scroll-margin 2                             ; It's nice to maintain a little margin
      inhibit-compacting-font-caches t)
#+end_src

+ What time is it?
#+begin_src emacs-lisp :tangle yes
;; what time is it?
(display-time-mode 1)
#+end_src

+ Without ~which-key~ I'd still be stuck in that first scratch buffer. It can get a little clogged with the word /evil/ when you use /evil-mode/ so let's filter that stuff out.
#+begin_src emacs-lisp :tangle yes
;; which key? this one.
(setq which-key-idle-delay 0.05)
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
#+end_src

+ A tweak to get ~which-key~ dispatch working.
#+begin_src emacs-lisp :tangle yes
;; tell which-key to behave
(setq which-key-use-C-h-commands t
      prefix-help-command #'which-key-C-h-dispatch)

(defadvice! fix-which-key-dispatcher-a (fn &rest args)
  :around #'which-key-C-h-dispatch
  (let ((keys (this-command-keys-vector)))
    (if (equal (elt keys (1- (length keys))) ?\?)
        (let ((keys (which-key--this-command-keys)))
          (embark-bindings (seq-take keys (1- (length keys)))))
      (apply fn args))))
#+end_src

+ The ~avy~ package is incredibly useful for getting around a buffer. I don't want it to limit itself to the current buffer or window only.
#+begin_src emacs-lisp :tangle yes
;; all of them!
(setq avy-all-windows t)
#+end_src

+ When I'm slicing and dicing windows I want them to default to splitting to the right or to the bottom of the frame. Also, ask me what buffer to use in the newly created window.
#+begin_src emacs-lisp :tangle yes
;; do the splits
(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src

+ I used to rely on the ~deft~ package to create and manage org-mode files. While it isn't as integral anymore I still use it for some things.
#+begin_src emacs-lisp :tangle yes
;; deft config
(use-package! deft
  :after org
  :init
  (setq deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))
  :custom
  (deft-recursive t)
  (deft-use-filename-as-title nil)
  (deft-use-filter-string-for-filename t)
  (deft-extensions '("md" "txt" "org"))
  (deft-default-extension "org")
  (deft-directory (expand-file-name "~/Dropbox/Org/")))
#+end_src

+ Shit, I don't even remember what this does. I had some problem with a new workspace being created every time I reopened an Emacs server with emacsclient.
#+begin_src emacs-lisp :tangle yes
;; whips persp-mode into shape
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+end_src

+ Okay, this one I /really/ don't remember.
#+begin_src emacs-lisp :tangle yes
;; what the fuck does this do? I'll leave it alone for now
(setq tab-bar-format '(tab-bar-format-global)
      tab-bar-mode t)
#+end_src

+ Manually setting the search path for projectile.
#+begin_src emacs-lisp :tangle yes
;; where are my projects?
(setq projectile-project-search-path
      '("~/.config/" "~/.config/fish/" "~/.config/kitty/" "~/.config/mpv/" "~/.config/sway/" "~/.config/ranger/" "~/.config/waybar/"))
#+end_src

+ Prompt me for completion harder daddy.
#+begin_src emacs-lisp :tangle yes
;; I like prompt prompts
(setq company-idle-delay 0.01)
#+end_src

+ This fixes an issue with vterm and native-compilation.
#+begin_src emacs-lisp :tangle yes
;; supposedly this helps native-comp and vterm play well together
(setq vterm-always-compile-module t)
#+end_src

+ How should org-mode open specific file types? I'll keep everything default but open pdfs in an external program. In this case I'll use the system default.
#+begin_src emacs-lisp :tangle yes
(setq org-file-apps
      '((remote . emacs)
       (auto-mode . emacs)
       (directory . emacs)
       ("\\.mm\\'" . default)
       ("\\.x?html?\\'" . default)
       ("\\.pdf\\'" . emacs)))
#+end_src

*** Helpful Functions
+ I want to be able to insert an active timestamp with relative ease.
#+begin_src emacs-lisp :tangle yes
(defun kev/get-timestamp ()
  "Calls org-time-stamp with 2 prefix arguments"
  :repeat nil
  (interactive)
  (org-time-stamp '(16) t))
#+end_src

+ Open the file that I'm currently writing this in.
#+begin_src emacs-lisp :tangle yes
(defun org-open-config-file ()
  (interactive)
  (find-file "~/.doom.d/config.org"))
#+end_src

+ A helper function that I stole from jeet to reload this file after it's tangled.
#+begin_src emacs-lisp :tangle yes
;; reload config file
(defun kev/reload ()
  "A simple command to make reloading my config easier."
  (interactive)
  (load! "config" doom-private-dir)
  (message "Reloaded!"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(map! :leader
      "h r c" #'kev/reload)
#+end_src

+ Evaluate configuration and reload fonts.
#+begin_src emacs-lisp :tangle yes
;; a function to see my font tweaks quickly
(defun evig ()
  "Evaluate the current buffer and reload fonts."
  (interactive)
  (eval-buffer)
  (doom/reload-font))
#+end_src

+ I have an org document for each project I'm working on. When I take meeting notes I'll enter the meeting as a new heading. This little guy, in combination with a keybind, spits out the date formatted the way I like it.
#+begin_src emacs-lisp :tangle yes
;; what day is it?
(defun today ()
  "Insert string for today's date nicely formatted as yyyy-MM-dd, Day of the Week"
  (interactive)                 ; permit invocation in minibuffer
  (insert (format-time-string "%Y-%m-%d, %A")))
#+end_src

+ This bad boy selects the entire line and places your cursor at the end of it. I didn't know that there was an existing function for that at the time. I'll keep this around for now.
#+begin_src emacs-lisp :tangle yes
;; this is terrible
(defun select-line ()
  "select from point to end of line"
  (interactive)
  (evil-visual-state)
  (end-of-line))
#+end_src

+ A handy function I stole from @tecosaur to create a new org-mode buffer.
#+begin_src emacs-lisp :tangle yes
;; create new empty org-mode buffer
(evil-define-command evil-buffer-org-new (count file)
  "Creates a new ORG buffer replacing the current window, optionally
   editing a certain FILE"
  :repeat nil
  (interactive "P<f>")
  (if file
      (evil-edit file)
    (let ((buffer (generate-new-buffer "*new org*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (org-mode)))))
#+end_src

+ I want to tangle this configuration file when I save it.
#+begin_src emacs-lisp :tangle yes
;; tangle literate config on save
(defun org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.doom.d/config.org"))
    (let ((org-config-babel-evaluate nil))
      (org-babel-tangle))))

  (add-hook 'org-mode-hook
        (lambda ()
          (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src

+ Let's load my custom keybindings that I put in separate file for reasons I no longer remember. Oh, and my ~abbrev~ definitions that automagically fix many common spelling mistakes.
#+begin_src emacs-lisp :tangle yes
;; keybinds
(load! "bindings")

;; abbrev mode definitions
(load! "abbrev")
#+end_src

** Lookin' Good
*** Theme
+ Everything solarized. Yes, even that.
#+begin_src emacs-lisp :tangle yes
;; solarized me
(setq doom-theme 'doom-solarized-dark)
#+end_src

+ A small change so that the highlight selection isn't the same color as the org-babel background color.
#+begin_src emacs-lisp :tangle yes
(custom-set-faces! '(region :background "#094959"))
#+end_src

*** Fonts
+ I enjoy a nice looking font. I'm also a fan of eye candy. So things like ligatures and code glyphs appeal to me. I customized and built my own version of Iosevka recently so that's what I'm using at the moment.
#+begin_src emacs-lisp :tangle yes
;; choose your fonts!
(setq doom-font (font-spec :family "Bespoke Iosevka Mono" :size 20 :weight 'semibold)
      doom-variable-pitch-font (font-spec :family "Overpass Nerd Font" :size 22 :weight 'medium)
      doom-unicode-font (font-spec :family "Noto Color Emoji" :weight 'regular)
      doom-serif-font (font-spec :family "BlexMono Nerd Font" :weight 'light))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

+ I like emojis. There, I said it. I am specifying a different font to handle emojis.
#+begin_src emacs-lisp :tangle yes
;; emojis
(use-package! emojify
  :config
  (when (member "Segoe UI Emoji" (font-family-list))
    (set-fontset-font
     t 'symbol (font-spec :family "Segoe UI Emoji") nil 'prepend))
  (setq emojify-display-style 'unicode)
  (setq emojify-emoji-styles '(unicode)))
#+end_src

#+begin_src emacs-lisp :tangle yes
(add-hook! 'after-init-hook #'global-emojify-mode)
(add-hook! 'after-init-hook #'global-emojify-mode-line-mode)
(setq emojify-company-tooltips-p t)
(setq emojify-emoji-set "twemoji-v2-22")
#+end_src

+ I want to be able to start typing and have a list of emojis pop up in a prompt for completion.
#+begin_src emacs-lisp :tangle yes
;; emojis in my backend
(after! org
  (set-company-backend! 'org-mode-hook '(company-emoji company-capf)))
#+end_src

+ Mixing monospace and variable pitched fonts in org-mode gives you a visually impressive workspace. Once again I am swiping a bit of config from the impressive @tecosaur.
#+begin_src emacs-lisp :tangle yes
;; my pitches getting all mixed up
(defvar mixed-pitch-modes '(org-mode LaTeX-mode markdown-mode gfm-mode Info-mode)
  "Modes that `mixed-pitch-mode' should be enabled in, but only after UI initialisation.")
(defun init-mixed-pitch-h ()
  "Hook `mixed-pitch-mode' into each mode in `mixed-pitch-modes'.
Also immediately enables `mixed-pitch-modes' if currently in one of the modes."
  (when (memq major-mode mixed-pitch-modes)
    (mixed-pitch-mode 1))
  (dolist (hook mixed-pitch-modes)
    (add-hook (intern (concat (symbol-name hook) "-hook")) #'mixed-pitch-mode)))
(add-hook 'doom-init-ui-hook #'init-mixed-pitch-h)
#+end_src

+ This will enable gravatars when viewing commits. The service used by default is [[https://www.libravatar.org/][Libravatar]].
#+begin_src emacs-lisp :tangle yes
;; gravatars in my commits
(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
#+end_src

*** Doom Dashboard
+ The first thing you see when you fire up Doom Emacs is the Doom Dashboard. I'm using a cute little demon as the splash image. The image was created by [[https://github.com/eccentric-j/doom-icon][@eccentric-j]].
#+begin_src emacs-lisp :tangle yes
;; fancy start up buffer splash image
(setq fancy-splash-image "~/Pictures/smaller-cute-demon.png")
#+end_src

*** Modeline
+ Some of the information displayed by default in the modeline is superfluous and so I snip it right out of there.
#+begin_src emacs-lisp :tangle yes
;; I don't need to see this
(defun doom-modeline-conditional-buffer-encoding ()
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

  (add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src

+ When I see text in red I assume something has gone wrong. The default in Doom is to show a the filename in red when there are unsaved changes. Let's go with a slightly less alarming orange.
#+begin_src emacs-lisp :tangle yes
;; red is too aggressive, so let's make it orange
(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))
#+end_src

+ I've had issues in the past with modeline text or icons being pushed offscreen on the right side of the modeline. This adds some padding to prevent that.
#+begin_src emacs-lisp :tangle yes
;; gimme some space!
(after! doom-modeline
  (doom-modeline-def-modeline 'main
    '(bar matches buffer-info remote-host buffer-position parrot selection-info)
    '(misc-info minor-modes checker input-method buffer-encoding major-mode process vcs "  ")))
#+end_src

+ I'm trying out a few more things in the modeline to see what I like.
#+begin_src emacs-lisp :tangle yes
(after! doom-modeline
  (setq doom-modeline-icon 't
        doom-modeline-env-version t
        doom-modeline-buffer-modification-icon t
        doom-modeline-enable-word-count t
        doom-modeline-icon (display-graphic-p)
        doom-modeline-persp-name t
        doom-modeline-persp-icon t
        doom-modeline-github t
        doom-modeline-mu4e t))
#+end_src

+ A custom modeline for pdf files stolen from jeet who stole it from teco.
#+begin_src emacs-lisp :tangle yes
(after! (pdf-tools doom-modeline)
  (doom-modeline-def-segment pdf-icon
    (concat
     (doom-modeline-spc)
     (doom-modeline-icon 'octicon "file-pdf" nil nil
                         :face (if (doom-modeline--active)
                                   'all-the-icons-red
                                 'mode-line-inactive)
                         :v-adjust 0.02)))

  (doom-modeline-def-segment buffer-name
    (concat
     (doom-modeline-spc)
     (doom-modeline--buffer-name)))

  (defun doom-modeline-update-pdf-pages ()
    "Update PDF pages."
    (setq doom-modeline--pdf-pages
          (concat " P"
                  (number-to-string (eval `(pdf-view-current-page)))
                  (propertize (concat "/" (number-to-string (pdf-cache-number-of-pages))) 'face 'doom-modeline-buffer-minor-mode))))

  (doom-modeline-def-segment pdf-pages
    "Display PDF pages."
    (if (doom-modeline--active) doom-modeline--pdf-pages
      (propertize doom-modeline--pdf-pages 'face 'mode-line-inactive)))

  (doom-modeline-def-modeline 'pdf
    '(bar window-number matches pdf-pages pdf-icon buffer-name)
    '(misc-info major-mode process vcs))

  (defun doom-set-pdf-modeline-h ()
    "sets the pdf modeline"
    (doom-modeline-set-modeline 'pdf))

  (add-hook! 'pdf-view-mode-hook 'doom-set-pdf-modeline-h))
#+end_src

*** Childframes
**** Vertico
+ I use ~vertico~ and the Doom Emacs affiliated modules/packages as my completion engine. I enjoyed having the option of ~ivy~ in a childframe instead of the minibuffer. This is someone's attempt at using a childframe for ~vertico~ that I'm tinkering with.
#+begin_src emacs-lisp :tangle yes
;; children of vertico
(require 'vertico-posframe)
(vertico-posframe-mode 1)

(setq vertico-posframe-border-width 4)

(custom-set-faces!
  '(vertico-posframe-border :inherit default :background "#094959"))
#+end_src

*** Other
+ I'm flying around without having my current line highlighted. For some reason it makes things feel snappier. I don't think that's true but I like it anyway.
#+begin_src emacs-lisp :tangle yes
;; I know what line I'm on
(remove-hook 'doom-first-buffer-hook #'global-hl-line-mode)
#+end_src

+ Where am I? The cursor flashes when I jump around. Doom Emacs has a built-in module called ~nav-flash~ but I like the ~beacon~ package a bit more so that's what I'm using.
#+begin_src emacs-lisp :tangle yes
;; this helps if I lose what line I'm on
(beacon-mode 1)
#+end_src

** Org Mode = Best Mode
*** The Boring Stuff
 + Give my headings their space!
#+begin_src emacs-lisp :tangle yes
;; stay out of my personal space
(setq org-cycle-separator-lines -1)
#+end_src

+ Org capture is an amazing tool that let's you add todo items, journal entries, and notes to files on the fly. Capture templates can take you to new heights of efficiency. Which is why I always forget to use them.
#+begin_src emacs-lisp :tangle yes
;; I should use org-capture
(after! org
  (setq org-capture-templates
        '(("t" "Task" checkitem
           (file+headline +org-capture-todo-file "Inbox")
           "- [ ] %?\n%i\n%a" :prepend t)
          ("n" "Notes" entry
           (file+headline +org-capture-notes-file "Unsorted")
           "* %u %?\n%i\n%a" :prepend t)
          ("j" "Journal" entry
           (file+olp+datetree +org-capture-journal-file)
           "* %U %?\n%i\n%a" :prepend t))))
#+end_src

+ When you make your org-mode priorities fancy Emacs can get a little fussy. So someone smarter than me made a hook to suppress those error messages.
#+begin_src emacs-lisp :tangle yes
;; god damn it teco I should really learn more elisp before copying and pasting shit
(defadvice! shut-up-org-problematic-hooks (orig-fn &rest args)
  :around #'org-fancy-priorities-mode
  (ignore-errors (apply orig-fn args)))
#+end_src

+ I like nesting headlines and I want LaTeX to respect that when I use it to pummel an org document into the shape of a pdf.
#+begin_src emacs-lisp :tangle yes
;; go deep!
(setq org-export-headline-levels 5)
#+end_src

*** Make It Pretty!
+ I use org-mode to create task lists. Having keywords I can assign to a heading helps with that.
#+begin_src emacs-lisp :tangle yes
;; this is a priorities
(after! org
  (setq org-priority-faces
        '((65 :foreground "red" :weight bold)
          (66 :foreground "orange" :weight bold)
          (67 :foreground "yellow" :weight bold)
          (68 :foreground "blue" :weight normal))
        org-fancy-priorities-list '("HIGH" "MID" "LOW" "OPTIONAL")
        org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i)" "WAIT(w)" "|" "DONE(d)" "CANCELLED(c)" "REMINDER(r)"))
        org-todo-keyword-faces
        '(("TODO" :foreground "#34f455" :weight bold :underline t)
          ("INPROGRESS" :foreground "#f4f434" :weight normal :underline t)
          ("WAIT" :foreground "#83cec8" :weight normal :underline nil)
          ("DONE" :foreground "#a98bf4" :weight normal :strike-through t)
          ("CANCELLED" :foreground "#818178" :weight normal :strike-through t)
          ("REMINDER" :foreground "#8DDFF3" :weight normal :underline nil))))
#+end_src

+ I find these face attributes to be the most pleasing for my org headings.
#+begin_src emacs-lisp :tangle yes
;; you got custom on my face
(custom-set-faces!
  '(outline-1 :weight extra-bold :height 1.4)
  '(outline-2 :weight bold :height 1.2)
  '(outline-3 :weight bold :height 1.15)
  '(outline-4 :weight semi-bold :height 1.10)
  '(outline-5 :weight semi-bold :height 1.08)
  '(outline-6 :weight semi-bold :height 1.05)
  '(outline-8 :weight semi-bold)
  '(outline-9 :weight semi-bold))

(custom-set-faces!
  '(org-document-title :height 1.5))
#+end_src

 + I did say /make it pretty/ did I not?
#+begin_src emacs-lisp :tangle yes
;; so pretty
(add-hook 'org-mode-hook #'+org-pretty-mode)
#+end_src

+ Who wants normal old bullets for their headings anyway?
#+begin_src emacs-lisp :tangle yes
;; you're a superstar!
(after! org-superstar
  (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
        org-superstar-prettify-item-bullets t ))
#+end_src

+ A couple of things are going on in this next bit. I think the downward facing triangle looks nice than the ellipses for folded org trees. Also, I don't need to see those stars before my pretty bullets. Also the second, it helps to prioritize tasks and it is nice to make those priorities pop visually.
#+begin_src emacs-lisp :tangle yes
;; more fancy please
(setq org-ellipsis " ▾ "
      org-hide-leading-stars t
      org-priority-highest ?A
      org-priority-lowest ?E
      org-priority-faces
      '((?A . 'all-the-icons-red)
        (?B . 'all-the-icons-orange)
        (?C . 'all-the-icons-yellow)
        (?D . 'all-the-icons-green)
        (?E . 'all-the-icons-blue)))
#+end_src

+ I replace a bunch of common org-mode specific words with fancy glyphs or icons. Ripped straight out of @tecosaur config with some minor tweaks of my own.
#+begin_src emacs-lisp :tangle yes
;; why use words when have pictures?
(after! org
  (appendq! +ligatures-extra-symbols
            `(:checkbox      ""
              :pending       "◼"
              :checkedbox    "☑"
              :list_property "∷"
              :em_dash       "—"
              :ellipses      "…"
              :arrow_right   "→"
              :arrow_left    "←"
              :title         "τ"
              :subtitle      "ʈ"
              :author        "α"
              :date          "δ"
              :property      "☸"
              :options       "⌥"
              :startup       "⏻"
              :macro         "μ"
              :html_head     "Ԋ"
              :html          "Ԋ"
              :latex_class   "Ł"
              :latex_header  "Ł"
              :beamer_header "β"
              :latex         "Ł"
              :attr_latex    "Ł"
              :attr_html     "Ԋ"
              :attr_org      "⒪"
              :begin_quote   "❝"
              :end_quote     "❞"
              :caption       "☰"
              :header        "›"
              :results       "⮯"
              :begin_export  "⏩"
              :end_export    "⏪"
              :properties    "⚙"
              :drawer        "▬"
              :end           "∎"
              :log           "⬓"
              :email         "📧"
              :priority_a   ,(propertize "⚑" 'face 'all-the-icons-red)
              :priority_b   ,(propertize "⬆" 'face 'all-the-icons-orange)
              :priority_c   ,(propertize "■" 'face 'all-the-icons-yellow)
              :priority_d   ,(propertize "⬇" 'face 'all-the-icons-green)
              :priority_e   ,(propertize "❓" 'face 'all-the-icons-blue)))
  (set-ligatures! 'org-mode
    :merge t
    :checkbox      "[ ]"
    :pending       "[-]"
    :checkedbox    "[X]"
    :list_property "::"
    :em_dash       "---"
    :ellipsis      "..."
    :arrow_right   "->"
    :arrow_left    "<-"
    :title         "#+title:"
    :subtitle      "#+subtitle:"
    :author        "#+author:"
    :date          "#+date:"
    :property      "#+property:"
    :options       "#+options:"
    :startup       "#+startup:"
    :macro         "#+macro:"
    :html_head     "#+html_head:"
    :html          "#+html:"
    :latex_class   "#+latex_class:"
    :latex_header  "#+latex_header:"
    :beamer_header "#+beamer_header:"
    :latex         "#+latex:"
    :attr_latex    "#+attr_latex:"
    :attr_html     "#+attr_html:"
    :attr_org      "#+attr_org:"
    :begin_quote   "#+begin_quote"
    :end_quote     "#+end_quote"
    :caption       "#+caption:"
    :header        "#+header:"
    :begin_export  "#+begin_export"
    :end_export    "#+end_export"
    :results       "#+RESULTS:"
    :property      ":properties:"
    :end           ":end:"
    :drawer        ":drawer:"
    :log           ":log:"
    :email         "#+email:"
    :priority_a    "[#A]"
    :priority_b    "[#B]"
    :priority_c    "[#C]"
    :priority_d    "[#D]"
    :priority_e    "[#E]")
  (plist-put +ligatures-extra-symbols :name "⁍"))
#+end_src

+ Oh yea, I still need to hook fancy priorities into org-mode.
#+begin_src emacs-lisp :tangle yes
;; More. Fancy.
(add-hook! org-mode 'org-fancy-priorities-mode)
#+end_src

+ Get out of here stars! Never talk to me or my Unicode bullets again.
#+begin_src emacs-lisp :tangle yes
;; get out of my face stars
(setq org-hide-leading-stars t)
#+end_src

+ Defines a minor mode to allow special forms such as /italics/, *bold*, _underline_ and =literal= to be editable when the cursor is over them, otherwise display the proper value.
#+begin_src emacs-lisp :tangle yes
;; you will stay hidden until I summon you
(use-package! org-appear
  :after org
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t))
#+end_src

+ A little bit of configuration for the company-org-block package.
#+begin_src emacs-lisp :tangle yes
(use-package! company-org-block
  :after org
  :config
  (setq company-org-block-edit-style 'auto))

(after! org
  (set-company-backend! 'org-mode-hook '(company-org-block company-capf)))
#+end_src

** You've Got Mail
*** mu4me?
+ Mu4e is an awesome way to manage your email. Or in my case a new and interesting way I /could/ check my email if I remembered to do it.

+ Emacs needs you to tell it where mu4e is located sometimes. Not always, but for reasons I can't remember it was necessary in this situation.
#+begin_src emacs-lisp :tangle yes
;; where the email client at?
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
#+end_src

+ Are you ready for a big blob of  ~(/setq/...)~?
#+begin_src emacs-lisp :tangle yes
;; this is how I do the emails
(after! mu4e
  (setq user-mail-address "k.warden.89@gmail.com")
  (setq user-full-name "Kevin Ward")
  (setq mu4e-change-filenames-when-moving t)    ;; Avoid mail syncing issues
  (setq mu4e-update-interval (* 15 60))         ;; Sync with isync every 15 minutes
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-index-update-in-background t)
  (setq mu4e-use-fancy-chars t)
  (setq mu4e-view-show-images t)
  (setq message-kill-buffer-on-exit t)
  (setq mu4e-drafts-folder "/[Gmail]/Drafts")
  (setq mu4e-sent-folder "/[Gmail]/Sent Mail")
  (setq mu4e-refile-folder "/[Gmail]/All Mail")
  (setq mu4e-trash-folder "/[Gmail]/Trash")
  (setq smtpmail-smtp-user "k.warden.89@gmail.com")
  (setq smtpmail-default-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-server "smtp.gmail.com")
  (setq smtpmail-smtp-service 587)
  (setq message-send-mail-function 'smtpmail-send-it)
  (setq mu4e-compose-signature "---\nKevin Ward")
  (setq mu4e-maildir-shortcuts
    '((:maildir "/Inbox"    :key ?i)
      (:maildir "/[Gmail]/Sent Mail" :key ?s)
      (:maildir "/[Gmail]/Trash"     :key ?t)
      (:maildir "/[Gmail]/Drafts"    :key ?d)
      (:maildir "/[Gmail]/All Mail"  :key ?a))))
#+end_src

+ Setting up mu4e with Gmail requires a fair amount of configuration outside of Emacs. For example, I use the isync package to fetch my email from the remote Gmail server to be indexed and served up locally.

+ If you're only syncing Gmail folders you don't need to have mu4e any cleanup after indexing. Also, since Gmail uses labels as folders we can use lazy check since messages don't really "move".
#+begin_src emacs-lisp :tangle yes
;; let gmail do it
(after! mu4e
  (setq mu4e-index-cleanup nil
        mu4e-index-lazy-check t))
#+end_src

** The Experiments
*** Browser Bookmarks
+ I have several thousand bookmarks that I've collected and tagged with the Raindrop.io service. Buku is a neat command line package that I would like to use instead. Someone made an Emacs package to integrate Buku into this text editor. I'm giving it a try for now.
#+begin_src emacs-lisp :tangle yes
;; another place to dump my web browser bookmarks
(setq ebuku-results-limit 0)
#+end_src

*** Colorized Hexcodes
+ Hexcodes are colorized with the rainbow-mode package. Rainbow-mode is hooked into org-mode and all programming modes.
#+begin_src emacs-lisp :tangle yes
(add-hook! org-mode 'rainbow-mode)
(add-hook! prog-mode 'rainbow-mode)
#+end_src

*** Discord Rich Presence
+ Do I want people to know how much time I spend in Emacs?
#+begin_src emacs-lisp :tangle yes
(use-package! elcord
  :config
  (setq elcord-quiet t
        elcord-refresh-rate 15
        elcord-display-buffer-details 'nil
        elcord-use-major-mode-as-main-icon t)
  (elcord-mode +1))
#+end_src

** What's Computer Programming?
*** Common Lisp
+ I'm trying to learn more about elisp's big brother /common-lisp/.
#+begin_src emacs-lisp :tangle yes
;; nothing but a common lisp
(after! sly
  (setq sly-lisp-implementations
        '((sbcl ("/usr/local/bin/sbcl") :coding-system utf-8-unix))))
#+end_src
